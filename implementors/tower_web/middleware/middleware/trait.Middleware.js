(function() {var implementors = {};
implementors["tower_web_protobuf"] = [{text:"impl&lt;S, ReqBody, RespBody&gt; <a class=\"trait\" href=\"tower_web/middleware/middleware/trait.Middleware.html\" title=\"trait tower_web::middleware::middleware::Middleware\">Middleware</a>&lt;S&gt; for <a class=\"struct\" href=\"tower_web_protobuf/struct.ProtobufMiddleware.html\" title=\"struct tower_web_protobuf::ProtobufMiddleware\">ProtobufMiddleware</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"tower_web_protobuf/common/trait.Service.html\" title=\"trait tower_web_protobuf::common::Service\">Service</a>&lt;Request = <a class=\"struct\" href=\"tower_web_protobuf/common/struct.HttpRequest.html\" title=\"struct tower_web_protobuf::common::HttpRequest\">HttpRequest</a>&lt;ReqBody&gt;, Response = <a class=\"struct\" href=\"tower_web_protobuf/common/struct.HttpResponse.html\" title=\"struct tower_web_protobuf::common::HttpResponse\">HttpResponse</a>&lt;RespBody&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"tower_web_protobuf/common/trait.Service.html#associatedtype.Future\" title=\"type tower_web_protobuf::common::Service::Future\">Future</a>: <a class=\"trait\" href=\"tower_web_protobuf/common/trait.Future.html\" title=\"trait tower_web_protobuf::common::Future\">Future</a>&lt;Item = <a class=\"struct\" href=\"tower_web_protobuf/common/struct.HttpResponse.html\" title=\"struct tower_web_protobuf::common::HttpResponse\">HttpResponse</a>&lt;RespBody&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"tower_web_protobuf/common/trait.Service.html#associatedtype.Error\" title=\"type tower_web_protobuf::common::Service::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>,&nbsp;</span>",synthetic:false,types:["tower_web_protobuf::middleware::protobuf::middleware::ProtobufMiddleware"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
